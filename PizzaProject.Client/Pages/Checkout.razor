@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
    <div class="main">
        <AuthorizeView Context="authContext">
            <NotAuthorized>
                <h2>Redirecting you...</h2>
            </NotAuthorized>
            <Authorized>
                <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
                    <div class="checkout-cols">
                        <div class="checkout-order-details">
                            <h4>Review order</h4>
                            <OrderReview Order="OrderState.Order" />
                        </div>
                    </div>

                    <button class="checkout-button btn btn-warning" @onclick="PlaceOrder">Place order</button>
                </EditForm>
                <a href="checkout" class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)"> Order ></a>
                <div class="checkout-delivery-address">
                    <h4>Deliver to...</h4>
                    <AddressEditor Address="@OrderState.Order.DeliveryAddress" />
                    <DataAnnotationsValidator />
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // The server won't accept orders from unauthenticated users, so avoid
            // an error by making them log in at this point
            NavigationManager.NavigateTo("user/signin?redirectUri=/checkout", true);
        }
    }
    async Task PlaceOrder()
    {
        var newOrderId = await HttpClient.PostJsonAsync<int>("orders", OrderState.Order);
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}
